/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();

        if(root == null) {
            return null;
        }

        TreeNode a = null;
        TreeNode b = null;

        q.add(root);
        int lvl = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            lvl++;

            for(int i = 0; i < size;i++) {
                TreeNode temp = q.poll();

                if(i == 0) {
                    a = temp;
                } 

                if(i == size - 1) {
                    b = temp;
                }

                if(temp.left != null) {
                    q.add(temp.left);
                } 

                if(temp.right != null) {
                    q.add(temp.right);
                }
            }
        }

        return lca(root, a, b);
    }

    public TreeNode lca(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) {
            return null;
        } else if(root == p) {
            return p;
        } else if(root == q) {
            return q;
        }

        TreeNode lcaOnLeft = lca(root.left, p, q);
        TreeNode lcaOnRight = lca(root.right, p, q);

        if(lcaOnLeft != null && lcaOnRight != null) {
            return root;
        } else if(lcaOnLeft != null) {
            return lcaOnLeft;
        } else if(lcaOnRight != null) {
            return lcaOnRight;
        }

        return null;
    }
}
